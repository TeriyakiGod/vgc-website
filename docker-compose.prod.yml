version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME:-vgc_website}
      POSTGRES_USER: ${DB_USER:-vgc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vgc_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-vgc_user} -d ${DB_NAME:-vgc_website}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  web:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=mysite.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-vgc_website}
      - DB_USER=${DB_USER:-vgc_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-3}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge
